// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=payment -destination=port_mock_test.go
//

// Package payment is a generated GoMock package.
package payment

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPointTransactionalDatabase is a mock of PointTransactionalDatabase interface.
type MockPointTransactionalDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockPointTransactionalDatabaseMockRecorder
}

// MockPointTransactionalDatabaseMockRecorder is the mock recorder for MockPointTransactionalDatabase.
type MockPointTransactionalDatabaseMockRecorder struct {
	mock *MockPointTransactionalDatabase
}

// NewMockPointTransactionalDatabase creates a new mock instance.
func NewMockPointTransactionalDatabase(ctrl *gomock.Controller) *MockPointTransactionalDatabase {
	mock := &MockPointTransactionalDatabase{ctrl: ctrl}
	mock.recorder = &MockPointTransactionalDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointTransactionalDatabase) EXPECT() *MockPointTransactionalDatabaseMockRecorder {
	return m.recorder
}

// InsertPointTransaction mocks base method.
func (m *MockPointTransactionalDatabase) InsertPointTransaction(tx *gorm.DB, pt PointTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPointTransaction", tx, pt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPointTransaction indicates an expected call of InsertPointTransaction.
func (mr *MockPointTransactionalDatabaseMockRecorder) InsertPointTransaction(tx, pt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPointTransaction", reflect.TypeOf((*MockPointTransactionalDatabase)(nil).InsertPointTransaction), tx, pt)
}

// Transactional mocks base method.
func (m *MockPointTransactionalDatabase) Transactional(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactional", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transactional indicates an expected call of Transactional.
func (mr *MockPointTransactionalDatabaseMockRecorder) Transactional(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactional", reflect.TypeOf((*MockPointTransactionalDatabase)(nil).Transactional), fn)
}

// UpsertPointBalance mocks base method.
func (m *MockPointTransactionalDatabase) UpsertPointBalance(tx *gorm.DB, userID, point int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPointBalance", tx, userID, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPointBalance indicates an expected call of UpsertPointBalance.
func (mr *MockPointTransactionalDatabaseMockRecorder) UpsertPointBalance(tx, userID, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPointBalance", reflect.TypeOf((*MockPointTransactionalDatabase)(nil).UpsertPointBalance), tx, userID, point)
}
